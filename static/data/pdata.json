[["named-records","Flexible records with named fields.","Flexible records with named fields.\n\n[@v0.1@] Initial (not published on cabal).\n\n[@v0.2@] @record@ allows for default values now.\n\n[@v0.2.1@] Requires @names-0.2.1@ now.\n\n[@v0.2.2@] TH @record@ definitions allow for\nmore types to be used in the definition.\n\n[@v0.2.3@] Cabal package tidied up and basic\ndocumentation added (also fixed a bug regarding\ndefinition of default values).\n\n[@v0.3@] Records can now extend other records.\n\n[@v0.3.1@] Added sample files to cabal package,\nrequirements bumped for names-v0.3\n\n[@v0.3.2@] Added @new@.\n\n[@v0.3.3@] Pushed requirements for @names-0.3.1@.\nUpdated documentation and samples.\n\n[@v0.4@] Records can now be serialized by means of\nthe @binary@ package. Added @upd@ function.\n\n[@v0.5@] Added @record'@.","Data, Records","Julian Fleischer <julian.fleischer@fu-berlin.de>","Julian Fleischer <julian.fleischer@fu-berlin.de>",44,"2013-05-26"],["gloss-juicy","Load any image supported by Juicy.Pixels in your gloss application","Lets you convert any image supported by Juicy.Pixels in a gloss application by converting to gloss' Bitmap representation.\n\nVersion 0.1.2 just enabled caching (from a frame to the next, and so on) of the images you load, so that they are not recomputed for each frame. Credits go to Jonathan Daugherty for the patch.","Graphics","Alp Mestanogullari <alpmestan@gmail.com>","Hugo Pacheco <hpacheco@gmail.com>",96,"2018-08-29"],["DrIFT-cabalized","Program to derive type class instances","DrIFT is a type sensitive preprocessor for Haskell. It extracts type declarations\nand directives from modules. The directives cause rules to be fired on the parsed\ntype declarations, generating new code which is then appended to the bottom of the input\nfile. The rules are expressed as Haskell code, and it is intended that the user can add new\nrules as required.\n\nDrIFT automates instance derivation for classes that aren't supported by the standard compilers.\nIn addition, instances can be produced in seperate modules to that containing the type declaration.\nThis allows instances to be derived for a type after the original module has been compiled.\nAs a bonus, simple utility functions can also be produced from a type.\n\nThis package was cabalized by gwern <gwern0@gmail.com>.","Data Structures","Noel Winstanley, John Meacham <john@repetae.net>","gwern <gwern0@gmail.com>, Metasepi team <metasepi@gmail.com>",32,"2013-09-03"],["random-access-list","Random-access lists in Haskell","A purely functional random-access list implementation\nusing skew binary number representation. These lists\noffer indexed random-access in logarithmic time while\nstill providing typical list functionality (head, tail,\ncons) in constant time. See \\\"Purely Functional Data\nStructures\\\" by Chris Okasaki.","Data Structures","Stephan Friedrichs","Stephan Friedrichs (deduktionstheorem at web dot de)",15,"2008-06-16"],["gtk-jsinput","A simple custom form widget for gtk which allows inputing of JSON values","Generates a simple form which allows users to input JSON values of type Bool, Rational and String.\nSaving of the form data is performed on \"focus change\".\nThis means that you provide jsInputNew with a special callback\nand that callback gets run every time the user changes a value in the form.\nYou can then save the contents of the form,\nor sync them to your application's own internal state.","Graphics","Timothy Hobbs","Timothy Hobbs <timothyhobbs@seznam.cz>",13,"2012-11-29"],["string-quote","QuasiQuoter for non-interpolated strings, texts and bytestrings.","QuasiQuoter for non-interpolated strings, texts and bytestrings.","Data","Audrey Tang","Audrey Tang <audreyt@audreyt.org>",14,"2011-03-29"],["pngload-fixed","Pure Haskell loader for PNG images","This package provides a simple PNG loader for PNG images. It currently supports\n24bit RGB(A) images with no interlacing.\nThis fixed version is the same as pngload-0.1, but without the haskell98 dependency.","Codecs","Marko Lauronen <marko.lauronen@pp1.inet.fi>","Rob Agar <robagar@fastmail.net>",10,"2014-07-22"],["hsqml-demo-samples","HsQML sample programs","HsQML sample programs","Graphics, GUI","Robin KAY","komadori@gekkou.co.uk",21,"2016-02-24"],["swapper","Transparently swapping data from in-memory structures to disk","This package provides a wrapper for functors, which allows their data to be\nautomatically swapped to disk and loaded back when necessary. Although\ninteraction with filesystem is required, whole interface (with exception of\ninitialization) is pure and safe as long as no external manipulation with\nused database files happens while the program is running.\nBecause only actual data, not indices (in Data.Map.Map, for example), are\nswapped and some accounting information are remembered for each item, this\nsystem is suitable mainly for situations where values are considerably\nlarger then indices. Furthermore, creating complete snapshots to a file of\nthis structure is supported; such snapshot can be then loaded, with\nindividual values being read as they are requested.\nThis package uses the Tokyo Cabinet <http://fallabs.com/tokyocabinet/>\ndatabase, which needs to be installed on the system.\nA prototype of another data structure, SwapMap, is available in the git\nrepository. It is similar to the Data.Map.Map and like Swapper allows\ntransparent swapping of data to disk, but without requiring any accessory\nfunction and with the ability to swap both elements and indices. This one\nis, however, not complete and thus not provided here.","Data Structures","Roman Smrž","Roman Smrž <roman.smrz@seznam.cz>",11,"2011-08-29"],["binary-indexed-tree","Binary Indexed Trees (a.k.a. Fenwick Trees).","Binary indexed trees are a data structure on indexes\n1 through n.  They allow you to compute the sum\nof all values at indexes 1 through i in O(logn) and to\nincrease the value at index i in O(logn).\n\nThis implements binary indexed trees, both\nas an immutable data structure in pure code\nand as a mutable data structure using the ST Monad.\n\nBoth the immutable and mutable version have the\nsame runtime complexity, but the mutable version\nhas a smaller constant.\n\nWritten by Maxwell Sayles (2012).","Data","Maxwell Sayles <maxwellsayles@gmail.com>","Maxwell Sayles <maxwellsayles@gmail.com>",12,"2012-10-10"],["HAppS-Server","Web related tools and services.","Web framework","Web, Distributed Computing","HAppS LLC","AlexJacobson@HAppS.org",34,"2008-11-09"],["cubicbezier","Efficient manipulating of 2D cubic bezier curves.","This library supports efficient manipulating of 2D cubic bezier curves, for use in graphics or typography.  Supported features are:\n\nEvaluating bezier curves and derivatives, affine transformations on bezier curves, arclength and inverse arclength, intersections between two curves, intersection between a curve and a line, curvature and radius of curvature, finding tangents parallel to a vector, finding inflection points and cusps.\n\nIt also supports polynomial root finding with Bernstein polynomials.\n\nThe module \"Geom2D.CubicBezier\" exports all the cubic bezier functions.  The module \"Geom2D\"\ncontains general 2D geometry functions and transformations.","Graphics, Geometry, Typography","Kristof Bastiaensen","Kristof Bastiaensen",126,"2018-01-25"],["hledger-diff","Compares the transactions in two ledger files.","hledger-diff is a command-line utility to compare two journal files.  It\nlooks at the transactions of a single account and prints out the transactions\nwhich are in one journal file but not in the other.  This is useful for\nreconciling existing journals with bank statements.","Finance, Console","Gabriel Ebner <gebner@gebner.org>","Gabriel Ebner <gebner@gebner.org>",65,"2018-05-13"],["pipes-key-value-csv","Streaming processing of CSV files preceded by key-value pairs.","Nonstandard CSV files, with the table preceded by a header consisting of key-value pairs are often the output format of varius test equipment, such as digital oscilloscopes.","Text, Pipes, CSV","Marcin Mrotek","marcin.jan.mrotek@gmail.com",111,"2017-12-29"],["currency","Types representing standard and non-standard currencies","This package provides two types for representing currencies, one that\ncan only represent ISO4217 currencies, and one that can also represent\nnonstandard currencies.\n\nAn IsString instance is provided for convenience on the general type.\n\nInstances of Eq, Ord, and, Hashable are provided for use as keys.\n\nThe Enum instance provides a mapping to/from ISO4217 numeric codes for\ncurrencies that have such a code.","Data","Stephen Paul Weber <singpolyma@singpolyma.net>","Stephen Paul Weber <singpolyma@singpolyma.net>",20,"2013-09-07"],["airtable-api","Requesting and introspecting Tables within an Airtable project.","","Web","Anand Srinivasan","Anand Srinivasan",72,"2017-03-10"],["fractal","Draw Newton, Julia and Mandelbrot fractals","Functions to generate fractals, with a command-line interface\nto render them as PGM files.","Graphics","Max Rabkin","max.rabkin@gmail.com",14,"2009-06-17"],["ldif","The LDAP Data Interchange Format (LDIF) tools","LDIF files parser implementation using Parsec.\nThe LDAP Data Interchange Format (LDIF) is defined by RFC 2849.\n\nCurrent implementation is not complete and compliant with RFC.\n\nPackage includes following command line tools:\n\n- ldifdiff - calculates delta LDIF between two content LDIF files.\n\n- ldif2html - produces HTML/browsable LDIF file.\n\n- ldifmodify - replays delta LDIF operations on content LDIF (similar to ldapmodify).\n\n- ldifundo - produces delta LDIF which rollbacks operations in input LDIF.\n","Text","Radoslav Dorcik <radoslav.dorcik@gmail.com>","radoslav.dorcik@gmail.com",48,"2013-01-13"],["farmhash","Fast hash functions.","This package provides bindings to the farmhash library.\n\nFarmHash is a family of very fast hash functions (see\n<https://code.google.com/p/farmhash/>). They are not suitable for\ncryptography.\n\nThis package bundles the library with it so there are no external\ndependencies.","System","Abhinav Gupta","mail@abhinavg.net",89,"2016-05-24"],["amazonka-snowball","Amazon Import/Export Snowball SDK.","The types from this library are intended to be used with\n<http://hackage.haskell.org/package/amazonka amazonka>, which provides\nmechanisms for specifying AuthN/AuthZ information, sending requests,\nand receiving responses.\n\nLenses are used for constructing and manipulating types,\ndue to the depth of nesting of AWS types and transparency regarding\nde/serialisation into more palatable Haskell values.\nThe provided lenses should be compatible with any of the major lens libraries\nsuch as <http://hackage.haskell.org/package/lens lens> or\n<http://hackage.haskell.org/package/lens-family-core lens-family-core>.\n\nSee \"Network.AWS.Snowball\" or <https://aws.amazon.com/documentation/ the AWS documentation>\nto get started.","Network, AWS, Cloud, Distributed Computing","Brendan Hay","Brendan Hay <brendan.g.hay+amazonka@gmail.com>",39,"2018-05-16"]]